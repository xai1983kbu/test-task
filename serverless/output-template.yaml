AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Layers:
    - Ref: UtilsLayer
Parameters:
  ParameterUserPoolArn:
    Type: String
Resources:
  BestStarWarsPersonsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: pk
        AttributeType: S
      - AttributeName: sk
        AttributeType: S
      KeySchema:
      - AttributeName: pk
        KeyType: HASH
      - AttributeName: sk
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
  BestStarWarsPersonsAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: '''*'''
        AllowHeaders: '''*'''
        AllowOrigin: '''*'''
      Auth:
        DefaultAuthorizer: ApiCognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          ApiCognitoAuthorizer:
            UserPoolArn:
              Fn::GetAtt:
              - MyCognitoUserPool
              - Arn
  ExternalDepsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: s3://test-task-best-star-wars-persons/ebb5efa28853407d111f1b4787a1cc2c
      Description: Layer for create-user handler. It contains axios package.
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: nodejs10.x
  UtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: s3://test-task-best-star-wars-persons/7b294e1abb32b6a9df2b01063ba30907
      Description: Layer for all handlers.
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: nodejs10.x
  createUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://test-task-best-star-wars-persons/630db7203644b56a910538edaf044d4e
      Handler: create-user.handler
      Runtime: nodejs10.x
      Layers:
      - Ref: ExternalDepsLayer
      Environment:
        Variables:
          TABLE_NAME:
            Ref: BestStarWarsPersonsTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: BestStarWarsPersonsTable
      Events:
        AddUser:
          Type: Api
          Properties:
            RestApiId:
              Ref: BestStarWarsPersonsAPI
            Path: /users
            Method: POST
  getUserByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://test-task-best-star-wars-persons/75e18c89c7a10bbd06ed7444cc0c135e
      Handler: get-user-by-id.handler
      Runtime: nodejs10.x
      Environment:
        Variables:
          TABLE_NAME:
            Ref: BestStarWarsPersonsTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: BestStarWarsPersonsTable
      Events:
        GetUser:
          Type: Api
          Properties:
            RestApiId:
              Ref: BestStarWarsPersonsAPI
            Path: /users/{id}
            Method: GET
  getAllUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://test-task-best-star-wars-persons/010c48e5ddfa479712ca4b2aa2ee194c
      Handler: get-all-users.handler
      Runtime: nodejs10.x
      Environment:
        Variables:
          TABLE_NAME:
            Ref: BestStarWarsPersonsTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: BestStarWarsPersonsTable
      Events:
        GetAllUsers:
          Type: Api
          Properties:
            RestApiId:
              Ref: BestStarWarsPersonsAPI
            Path: /users
            Method: GET
  updateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://test-task-best-star-wars-persons/77710a840fcd8e0915170e64d03ce437
      Handler: update-user.handler
      Runtime: nodejs10.x
      Environment:
        Variables:
          TABLE_NAME:
            Ref: BestStarWarsPersonsTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: BestStarWarsPersonsTable
      Events:
        UpdateUser:
          Type: Api
          Properties:
            RestApiId:
              Ref: BestStarWarsPersonsAPI
            Path: /users/{id}
            Method: PUT
  deleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://test-task-best-star-wars-persons/13d70c942888424cc6a3a5894d40e76b
      Handler: delete-user.handler
      Runtime: nodejs10.x
      Environment:
        Variables:
          TABLE_NAME:
            Ref: BestStarWarsPersonsTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: BestStarWarsPersonsTable
      Events:
        UpdateUser:
          Type: Api
          Properties:
            RestApiId:
              Ref: BestStarWarsPersonsAPI
            Path: /users/{id}
            Method: DELETE
  MyCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AliasAttributes:
      - email
      AutoVerifiedAttributes:
      - email
      UserPoolName: BestStarWarsPersons-userpool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
  MyCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: MyCognitoUserPool
      ClientName: BestStarWarsPersons-userpool-client
      GenerateSecret: false
      RefreshTokenValidity: 30
Outputs:
  Region:
    Description: Region
    Value:
      Ref: AWS::Region
  ApiUrl:
    Description: API endpoint URL for Prod environment
    Value:
      Fn::Sub: https://${BestStarWarsPersonsAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  CognitoUserPoolId:
    Description: Cognito User Pool Id
    Value:
      Ref: MyCognitoUserPool
  CognitoUserPoolClientId:
    Description: Cognito User Pool Client Id
    Value:
      Ref: MyCognitoUserPoolClient
